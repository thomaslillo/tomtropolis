---
import PrimaryLayout from '../layouts/Primary.astro';
---
<PrimaryLayout>
<div id="main-screen-div" class="p-4 md:p-8">                
  <h1 class="text-lg md:text-xl py-2">Welcome weary traveler</h1>
  <p class="text-sm md:text-base">Use the tool below to find more information about the creatures you encounter in 
    <a href="https://www.aidedd.org/dnd-filters/monsters.php" class="font-serif text-red-800 hover:text-red-500">D&D 5e.</a>
  </p>
  <div class="search-container flex flex-col py-2">
      <input type="text" id="monsterInput" class="py-2 px-4 w-full" placeholder="Enter a monster name" />      
      <button id="searchButton" class="bg-gray-200 hover:bg-blue-400 font-bold py-2 my-4 px-4 rounded">
          Search
      </button>
      <p id="searchSuggestions" class="text-xs md:text-sm"></p>
      <div id="monsterResult" class="monster-result py-2">
          <!-- Results will be displayed here -->
      </div>
  </div>
</div>
</PrimaryLayout>

<script>
//
// D&D API Requests Script

//
// Elements
const monsterInput = document.getElementById("monsterInput") as HTMLInputElement;
const searchButton = document.getElementById("searchButton") as HTMLButtonElement;
const monsterResult = document.getElementById("monsterResult") as HTMLDivElement;
const searchSuggestions = document.getElementById("searchSuggestions") as HTMLParagraphElement;

getAllMonsters();

//
// Event Listeners
searchButton.addEventListener("click", () => {
  const monsterName: string = monsterInput.value.toLowerCase();
  if (monsterName) {
    searchMonster(monsterName.replaceAll(" ", "-").toLowerCase());
  } else {
    monsterResult.innerHTML = "Please enter a monster name, like 'goblin'.";
  }
});

// upon typing in the input, show suggestions
monsterInput.addEventListener("input", () => {
  if (monsterInput.value === "") {
    searchSuggestions.innerHTML = "";
  }
  const partialName: string = monsterInput.value.toLowerCase();
  if (partialName) {
    const suggestions: string[] = searchMonsterSuggestions(partialName);
    // filter out suggestions that do not match the partial name
    const topSuggestions: string[] = suggestions.slice(0, 5).filter((suggestion: string) => {
      return suggestion.includes(partialName);
    });
    searchSuggestions.innerHTML = "<p><strong>Suggestions: </strong></p>" + topSuggestions.join(", ");
    console.log(suggestions);
  }
});

//
// Functions

// get all monster names and cache them for search suggestions
async function getAllMonsters(): Promise<void> {  
  try {
    const response: Response = await fetch("https://www.dnd5eapi.co/api/monsters");
    if (response.ok){
      const data: any = await response.json();
      localStorage.setItem("monsterNames", JSON.stringify(data.results));
      console.log("Saved monster names to local storage.");      
    } else {
      throw new Error(`${response.status} ${response.statusText}`);
    }    
  } catch (error) {
    console.log(error);
  }
}

// search partial monster names in local storage and return suggestions
// very basic literal search for partial matches
function searchMonsterSuggestions(partialName: string): string[] {
  const monsterIndicies: string[] = (JSON.parse(localStorage.getItem("monsterNames")).map((monster: any) => {
    return monster.index.replaceAll("-", " ");
  }) as string[]);
  const suggestions: string[] = monsterIndicies.filter((monster: string) => {
    return monster.includes(partialName);
  });
  return suggestions;
}

// search by getting the monster endpoint data
async function searchMonster(monsterName: string): Promise<void> {
  // loading message
  monsterResult.innerHTML = "Searching...";
  // search for the monster
  const monsterNameFormatted: string = monsterName.toLowerCase().replace(" ", "-");
  try {
    const response: Response = await fetch(
      `https://www.dnd5eapi.co/api/monsters/${monsterNameFormatted}`
    );
    if (!response.ok) {
      throw new Error(`${response.status} ${response.statusText}`);
    }
    const data: any = await response.json();
    console.log(data);
    // display the moster
    // TODO make this more dynamic and a seperate function
    monsterResult.innerHTML = `
    <div class="m-2 font-mono">
      <h1>${data.name}</h1>
      <p><strong>Type:</strong> ${data.type}</p>
      ${data.subtype ? `<p><strong>Subtype:</strong> ${data.subtype}</p>` : ''}
      <p><strong>Size:</strong> ${data.size}</p>
      <p><strong>Alignment:</strong> ${data.alignment}</p>
      <p><strong>Health:</strong> ${data.hit_points}</p>
      <p><strong>Languages:</strong> ${data.languages}</p>
      <p><strong>Challenge Rating:</strong> ${data.challenge_rating}</p>
      ${ data.image ? `<img src="https://www.dnd5eapi.co${data.image}">` : '' }      
    </div>
    `;    
  } catch (error) { 
    console.log(error);
    monsterResult.innerHTML = `Monster not found, please try again with a 
    different monster or different name for the same monster.`;
  }
}

</script>